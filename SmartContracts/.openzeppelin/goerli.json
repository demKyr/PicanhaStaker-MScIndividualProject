{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xF881b25D1Db3358930092320AF7199BABefCD035",
    "txHash": "0x758614b9380e1bbe37804c906e84546809257d73e1fb1666b54b70be094fa20c"
  },
  "proxies": [
    {
      "address": "0x23f73acdE6510C6f346Ab8Ef3fee62EdBA2027BE",
      "txHash": "0x258cdfc2d423c19006853c6749765f030b561016558ba3e195924722e0b4d011",
      "kind": "transparent"
    },
    {
      "address": "0x114Ecfb71C53Be841672cC7f7C5761E6d6e79750",
      "txHash": "0x341845f9e71ef362d2411ca87559fde1708656df29aa6dcecd04d1c4e8d30476",
      "kind": "transparent"
    },
    {
      "address": "0x65CB1335cCac2F778db46ae7aEe34b3cAB67C7D0",
      "txHash": "0xc7e472c8ea43be42a746bdd08b71bcb2d241cea0d7f8e1ce190bd40391350169",
      "kind": "transparent"
    },
    {
      "address": "0x27FCA119E472a1cB05C7ee4b965A1f5c7175095B",
      "txHash": "0x6b444cc0c225d8ddc24878da6ed2f3775a9c355354694bfe385509cefc35bd22",
      "kind": "transparent"
    },
    {
      "address": "0x0e28fCf5bfee2cf20B398d693D37DCdb7E8621Ac",
      "txHash": "0xae7f99e4ae56b50a9edd3b78312428a975439c358800d769d343c8493cca55c0",
      "kind": "transparent"
    },
    {
      "address": "0x544Bf32d8455B0Baa0c07A6B17bC4A8413c0dc9F",
      "txHash": "0xdd60261770e63cff5617c11a299d244c9acc0806728709f5705b7ca0a0dda590",
      "kind": "transparent"
    },
    {
      "address": "0x98e4Cc71c1Bfa2197122CC431832B9a4F2f5e131",
      "txHash": "0x5589bce0f2de61fa177cb25d04b321ef8502819da0efcc902977bfbe65111825",
      "kind": "transparent"
    },
    {
      "address": "0x22DB48A191E46d56feE11f3A187B800F5A436bc0",
      "txHash": "0xfda8f8dcbe0772321e5663da144caba1b2ba5b99699048788b6fc25be759c08c",
      "kind": "transparent"
    },
    {
      "address": "0x473eD865E266aD0Fa70a4a1CEC009f8A88b4289f",
      "txHash": "0xbcf4ab63d497ba4859ec67c3cc1105533262e774152795968747ebbdc3fadc8a",
      "kind": "transparent"
    },
    {
      "address": "0x73DE42F436c5DbdDc6b4b19748b72F1621c26936",
      "txHash": "0x6a7f2affd8882ca6a147357678b14a260ec84b00f9e1b67a03235ac014cd3142",
      "kind": "transparent"
    },
    {
      "address": "0xc7183c68A66a74c7470d8b9de7b590aa2cE109b9",
      "txHash": "0xffed610a775085f73b41075a3837ff40ad300d9e4249b75e78492bb9298d1498",
      "kind": "transparent"
    },
    {
      "address": "0x902E78Fa77FB980625463DBD96165a83E6E6a4B4",
      "txHash": "0x055c7f6cdf6516a027d16114b66481ba122586feb053dce2efabeb7b65f7beb5",
      "kind": "transparent"
    },
    {
      "address": "0x43eF1d44cA9bECdFC18aD5de7f1236A1dEdFA28a",
      "txHash": "0xa4c0ac98278ef8a77fd96528b9bea9a2c318a4283f9f95318b619bd6081a587a",
      "kind": "transparent"
    },
    {
      "address": "0xcDD5D9d3feE5669f567B183e10Be35C960D1F5f8",
      "txHash": "0x5bb5708d144c06d9539252322715bf629335ec9cabf203a9d68057a7ee31cc66",
      "kind": "transparent"
    },
    {
      "address": "0xF385297583A5432A3941de755920fd76aaa2E935",
      "txHash": "0x2911c18da8d3c563d7cf699c3bb49c4c6e09f12e4569d6b1f8d943b25fa6fc68",
      "kind": "transparent"
    },
    {
      "address": "0x2E283B6F68886b33c3D22B29E092DF44687D54d4",
      "txHash": "0xe37572e3a62662129c843a22e55c2e2dc55cba3d6ff0823245a3b691ac060d6e",
      "kind": "transparent"
    },
    {
      "address": "0xF7a8a6E6F11c150B7e50C75d0f78C0503290f9FC",
      "txHash": "0x677d17e8d6a2c9310f87be2607f27e06b1e6c090a14ddd952730d3dc74ab1777",
      "kind": "transparent"
    },
    {
      "address": "0xdC78cC0D035E1fa58155B85410A4d75e4Fb4E089",
      "txHash": "0x1f4edf3ca57f5f2487872fef5960e05a8d4099b41aa5815aa1c0255d338cac67",
      "kind": "transparent"
    },
    {
      "address": "0xC49E166a7201aF99037cB8acff48281364642038",
      "txHash": "0x464e1758db4698b9f14f6e13fafa2402e3df14e1e19c4f99e1c8be65e8639538",
      "kind": "transparent"
    },
    {
      "address": "0x0ce41d234f5E3000a38c5EEF115bB4D14C9E1c89",
      "txHash": "0x0514ca247be4dbbf731410cef6ac00fff777d0bdd8ffb16be205032e45222c61",
      "kind": "transparent"
    },
    {
      "address": "0xd81064777c998b25579393a5De86B7cBd6ada4CB",
      "txHash": "0x6cc4d5b8bd216b1b66e4ef035bd2706f894bdc1fc09d9655973f484b8ef6ee81",
      "kind": "transparent"
    },
    {
      "address": "0x185B21f4Ee2e76528dcDF6320DA8be7f6a3e0bBA",
      "txHash": "0xc4fa8c83bcda3820cfe495764608f59a4c034cc4144c8a21acb4fbc117e455e1",
      "kind": "transparent"
    },
    {
      "address": "0x1923e515b3Ed677b929895Ed2B01BDDb0473Ae2f",
      "txHash": "0x828c40dcd2af3f46ddf69fc2857c202c64e100bda25b850ec00f548c626d7f89",
      "kind": "transparent"
    },
    {
      "address": "0x9437eff6E8713CF1619D9507695489a6639b758d",
      "txHash": "0x7e4cd9320b3cbe9f55d2c342700084b471afaafe746469fbd6d24e549ad02828",
      "kind": "transparent"
    }
  ],
  "impls": {
    "9b63343b9396ca3eb6bc411f97ba0e264183d8984f711eb56ff8e7b5da2ebc0b": {
      "address": "0x741628111b326D9c2C6e8527F16d50a10050E52A",
      "txHash": "0x815f3ca1311ad8d243493c85ed4f84cc051c6c6cbcdb21a02c2b6d12d52103ab",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:8"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:9"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:10"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:12"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:16"
          },
          {
            "label": "totalPendingWithdrawals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:18"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "withdrawIDCounter",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:20"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:22"
          },
          {
            "label": "userPendingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "withdrawIDClaimable",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "unbondNonceToWithdrawID",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "b71f096e51fa88e05c6e3a6d6f8ec55e1cdb795a0a2e64da0af74ea6b2a784f6": {
      "address": "0x60DCa498dD3E2Fa6705c431BfCA73bbf96e3A51E",
      "txHash": "0xc08e865e4a7b5d8ec3aa560d35d41600c6e7d1ee1059acf03ec8f1e507435c05",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:8"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:9"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:10"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:12"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:16"
          },
          {
            "label": "totalPendingWithdrawals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:18"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "withdrawIDCounter",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:20"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:22"
          },
          {
            "label": "userPendingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "withdrawIDClaimable",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "unbondNonceToWithdrawID",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "49ce00cf26fa9ff33aa05b6c89da37883a376db9bafd9c42cf25451d87f6b4f4": {
      "address": "0xe37c7FbA1129479eC67FF8D4D761dE61e6690c71",
      "txHash": "0x5ae946032184aeb3c904183e708211cdb56e8eeb0f62fc019d62963a53fc8f24",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:8"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:9"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:10"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:12"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:16"
          },
          {
            "label": "totalPendingWithdrawals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:18"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "withdrawIDCounter",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:20"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:22"
          },
          {
            "label": "userPendingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "withdrawIDClaimable",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "unbondNonceToWithdrawID",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "01b8dae92b8c90c529f0fa3c2e6f99d33753bcb4c83a3e2adf2f93e3f1a1ca28": {
      "address": "0xa3F8beA5c5aaa781965cf951537eD93793b1C3Ad",
      "txHash": "0x7bac41103f43c49bd869803192fc9e798be175a8b6c2d89ffad0564fb5ccae6d",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:8"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:9"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:10"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:12"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:16"
          },
          {
            "label": "totalPendingWithdrawals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:18"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "withdrawIDCounter",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:20"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:22"
          },
          {
            "label": "userPendingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "withdrawIDClaimable",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "unbondNonceToWithdrawID",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "9282dd8af647194483b06c456bf32340161bf927d97a04b8810eaa0dd6b800c7": {
      "address": "0x7e61ce3d52f268bC462Dc5f0A5b0983F5FDF1b98",
      "txHash": "0x529dd00c9136da8cecf627f97b9003e433e132ad9e548d33aafc15da418f2e71",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:8"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:9"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:10"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:12"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:16"
          },
          {
            "label": "totalPendingWithdrawals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:18"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "withdrawIDCounter",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:20"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:22"
          },
          {
            "label": "userPendingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "withdrawIDClaimable",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "unbondNonceToWithdrawID",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "a1838a4941d6b5db1f4e6927dca7ed6f030e7cbd54b1ac3533fe3211e6df4f5f": {
      "address": "0x62943e5AfC6807bBC8d38884Feb7CEE626566948",
      "txHash": "0xe05544fc9d449411d26d06ae75e3456e67a485ebbfbf63272d07548010ac52b4",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:8"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:9"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:10"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:12"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:16"
          },
          {
            "label": "totalPendingWithdrawals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:18"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "withdrawIDCounter",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:20"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:22"
          },
          {
            "label": "userPendingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "withdrawIDClaimable",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "unbondNonceToWithdrawID",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "08014b369f62623b780b4056d5476a909dd8ffafb1e2096abd6d5a452ba76414": {
      "address": "0x6c2437404F9c0D7b646A3E6e8A22057Ae36180B1",
      "txHash": "0x14b7c384ec26c0053d41653095a8fed93bd3065cfe2d1c1ba39bb90e5013a622",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:8"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:9"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:10"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:12"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:16"
          },
          {
            "label": "totalPendingWithdrawals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:18"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "withdrawIDCounter",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:20"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:22"
          },
          {
            "label": "userPendingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "withdrawIDClaimable",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "unbondNonceToWithdrawID",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "2c01372052040890e7cfdfdb59984ccca7fa21a45b40f5b4b07ba8c32a9068dc": {
      "address": "0x9F911A0BC34443659c9E31E29615E50DD5eF1405",
      "txHash": "0x894cb004b5f9b0992f297807cceeb177829cb5e4baa3f91b8222f2bd033ed36f",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:8"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:9"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:10"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:12"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:16"
          },
          {
            "label": "totalPendingWithdrawals",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:18"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "withdrawIDCounter",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:20"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:22"
          },
          {
            "label": "userPendingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "withdrawIDClaimable",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "unbondNonceToWithdrawID",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "7d6ae45f5346032ec728bf5e578be14015e3cefdf4addd572956e8aa60efa142": {
      "address": "0x7893Ff121597dA8A407294476919C5603205028e",
      "txHash": "0x2b5ee1981d5782056c15bb8408101497280fae2b3078f7005130fbec93a6f20e",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:8"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:9"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:10"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:12"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:14"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:18"
          },
          {
            "label": "totalPendingWithdrawals",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:20"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:21"
          },
          {
            "label": "withdrawIDCounter",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:22"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "userPendingWithdrawals",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "withdrawIDClaimable",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:26"
          },
          {
            "label": "unbondNonceToWithdrawID",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:27"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:30"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "64",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "64",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "65",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "115",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "116",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "a3efc09f52c22158b0b0c71a08d9f0e9c85b308a892ca7dd2966c315e1aaf207": {
      "address": "0xcbCb98EE84E5F84D6584D8B22c473117bcb906ee",
      "txHash": "0xaf03e89a893226a80ea30ccc182168b518fb967b2c5eff029bfe3e71624e1bec",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:8"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:9"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:10"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:12"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:14"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:18"
          },
          {
            "label": "totalPendingWithdrawals",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:20"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:21"
          },
          {
            "label": "withdrawIDCounter",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:22"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "userPendingWithdrawals",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "withdrawIDClaimable",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_bool)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:26"
          },
          {
            "label": "unbondNonceToWithdrawID",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:27"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:30"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "64",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "64",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "65",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "115",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "116",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "165",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "166",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
            "label": "mapping(uint256 => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "44500a98d678eb476cc438b6d949d638105a1c64445041f2f51412913c704028": {
      "address": "0x4Bb7ce6BdDeB1382563Bae7F85dB36f8eaD3c290",
      "txHash": "0xc0402634cbfee00f7a32a0fed4b4fd3633e2e911c49020893416fe8c8a89ed5c",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2237_storage)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2237_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2237_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "95214deddf484db8d2e59904a4716bae26980bbc17be5b949cde5707922d25f4": {
      "address": "0x5D0354249be22a7EAa943157BD564E6616e3b634",
      "txHash": "0xf5ac3f917e830109dbd99c7cb9fcc792248c5557b9459e2ff921e693b555ac51",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2246_storage)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2246_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2246_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "2981907bdf7f282a7cdb75e8bcbde3278745d9cb4021050e9794af188131a9c8": {
      "address": "0x383F1Bb2bf242E9197ee12218CD4a051E21a961D",
      "txHash": "0x4e0d2db9f198b1308e50130cf9b94fcafeda8995dc2394326361994991a34abc",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2262_storage)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2262_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2262_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "93cc4f7016367565c4f282c8dde96e705cb4236483905f57dfcdae3f8245b424": {
      "address": "0xC11A6a644782fcD5083B11054B8f79a796Fb0Ef1",
      "txHash": "0x1107593d75a34d0be9a60691b82a6e9d9be988b15b50de39b68757e56f559feb",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2274_storage)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2274_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2274_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "6fb6335e7d04f347aa09c1bda94148dcf6c8c9de3909742ba80e8964dcb1d710": {
      "address": "0x022785E5CbF6B6f44a1C4A6b528a339572B8e51d",
      "txHash": "0x4a2ae2d4299ae1243933e40a14971ca5eded5765d4169da101ca3d5816ed17a0",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2288_storage)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2288_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2288_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "295a6fd9ff6b69f73daab11f3be736117ac1574eabdd2fedd54e9543f37f751c": {
      "address": "0x3757316D07A3aFfA2e729D6FeFfd99c8153D0488",
      "txHash": "0x3496e0240598bc8d3df9540f17822d43f70d9d8e3e105bdc3482f27bc6dfb276",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2298_storage)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2298_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2298_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "b1bf007868caaddc652e297c0e47511fadf05913c8e00a5eae28bf6a18c5ba62": {
      "address": "0xe6566989E355b011e85aBd80f9D5D00B4b7a75CF",
      "txHash": "0xf36b403dda3e3eebaf9d980d0134b494e077ca87df20b76806963834e8a7f21c",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2298_storage)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2298_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2298_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "0bfc4db971f87b5c972aa5e1e205616b0bfe6b9ec60c01d112607daf8d2ead8a": {
      "address": "0x0Ba5A31813a241aaF1249BB5a26fBA34b2D38DF1",
      "txHash": "0x37d2d021f17e508bd8d4df2a3c98fd0b1121bea97066483ec79a6db0f103113b",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2300_storage)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2300_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2300_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "0556fc527a3c6b250d53693c7148cd90cad5cf0a66c8f7abc10d0c3920e0ad1e": {
      "address": "0xc8b10a41811DB316B1Ff4C6Ef6F7f683BDB9e3DA",
      "txHash": "0xbbfb12e1991054d25f79b4adbce362bd423216702c73fc62af730e81559224af",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2339_storage)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2339_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2339_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "c3d44c54d8f16b3c13f3e2d4c8535237354bb11f98f12ba9e6a8516f375bfb0f": {
      "address": "0xd35DB53eB9668f02605dDa64b49dd860E194A1a7",
      "txHash": "0x5fd651500492cd4a3fe9decd6fbb35ec3625937e1b353e96aaab47f8f84f76a8",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2343_storage)",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts\\main\\StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin\\contracts-upgradeable\\proxy\\utils\\Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\utils\\ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\access\\OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin\\contracts-upgradeable\\security\\ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2343_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2343_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "aa869512b3f673cc7627da4a5979b8322c60a3319a7dd2e74c2d8d1395ff41f0": {
      "address": "0x262d36dD5ea6D5416a2C12ba841D8E48546d8719",
      "txHash": "0xa033a38ab3482627d16ad7060e253e320d9f4fbcaa28d11791160488cae5b781",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2544_storage)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2544_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2544_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "242c7f272185ce9a861dc4f7621f56f87deafbd0714a7f7b31118bb141551c79": {
      "address": "0x1B5134e21b13519eA028C51928bc2ae833DCb2C2",
      "txHash": "0xd5b899b83cb2d75936bb79c0fa59208b02426ddf305aa62310e760fffd91a022",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2544_storage)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2544_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2544_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "61cd5d92d90c0a66208d58fdd1e5714f13495cc7c6ae280f6d85282f07c26334": {
      "address": "0x5b7563eDdbBa7D203395bC13A08B9B80Af23B539",
      "txHash": "0x03a933d2a4e5de54f31687c871daabf726e5de6283181ad48049786a74a7e6c9",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2589_storage)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2589_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2589_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "7e3960f40483f81d9a8d539b20807caf6cc1d66eb3c5c17c1c181177299db49c": {
      "address": "0x6e3c092a01dB71d6a0D6C90CCE7561939898EAEa",
      "txHash": "0x9119e5ecf5e21b2dc12c89cb8dd533d500832d6dc4066ae45349caa9b5f68f28",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2579_storage)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2579_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2579_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "ae8952494ba3ea08cb5892355dd8feedb2a3fa27dcda3c0318a400a0497c4a2e": {
      "address": "0xBc594686145E1EA4D7D371d02c5012DfbE2A9597",
      "txHash": "0x1f5a76944a66b24522ddc06087ee4188071fda76c7247f3f4234374c5b5566a6",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)2579_storage)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)2579_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)2579_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "947a0f710fcef30be33f6972253c2e5adbf27a46d3947ad8755cc017e3207132": {
      "address": "0x35BeCae4151d0939a8aFa8EA2194fC31479027D4",
      "txHash": "0x7bee151187a4f3523caf017d25ec87eb139e21c59563cc8e09e80874dd633070",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:14"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:15"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:17"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:19"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:23"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:24"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:25"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:26"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:28"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)3722_storage)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_uint256)50_storage",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:32"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)3722_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)3722_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "c3f8f2944e497a0510870b0581501dbe10c169ed1fbf9d9c1eec09d8efc124dc": {
      "address": "0xfcD33fdA584C17372FC243fD60FF2b2D7a0e5085",
      "txHash": "0x4b700792e442f921a0e2b299d59a002927fa39da860dfdb8f5d8feeab10065af",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:21"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:24"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:31"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:34"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "unused0",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:46"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:50"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:53"
          },
          {
            "label": "unused1",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:58"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)4942_storage)",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:61"
          },
          {
            "label": "userAllowance",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:64"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_uint256)49_storage",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:67"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "212",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "213",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "214",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "215",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "216",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "217",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "262",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "262",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "263",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)4942_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)4942_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "7c32d05020e7b5f794f3ce527d910de3518e7de362c9cda9f0cd4ca4e8d748f6": {
      "address": "0x61582cdCe0c3Ab29F3D70c3A463c90552acEc4eC",
      "txHash": "0x820d37163acc7a1bb4b4341d3b3136a1b97028c8ef3ddbe57a4c9478eed57fc1",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:21"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:24"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:31"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:34"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:42"
          },
          {
            "label": "unused0",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:48"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:52"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:55"
          },
          {
            "label": "unused1",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:60"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)5228_storage)",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:63"
          },
          {
            "label": "userAllowance",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:66"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_uint256)49_storage",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:69"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "212",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "213",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "214",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "215",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "216",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "217",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "262",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "262",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "263",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)5228_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)5228_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "9f0445af7d810cb4f7100f09b66bdfb55893941c54f74e592703ecacf89d3a01": {
      "address": "0x320E6e2B36f0C0B12c4442E55A32eC7A826d599B",
      "txHash": "0xe4737873bfd1ed72faac969db4ec2f389525d6c26d6532715936a95affd5f836",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:21"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:24"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:31"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:34"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:42"
          },
          {
            "label": "unused0",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:48"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:52"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:55"
          },
          {
            "label": "unused1",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:60"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)5228_storage)",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:63"
          },
          {
            "label": "userAllowance",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:66"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_uint256)49_storage",
            "contract": "TruStakeMATICStorage",
            "src": "contracts/main/StakerStorage.sol:69"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "212",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "213",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "214",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "215",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "216",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "217",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "262",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "262",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "263",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)5228_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)5228_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "9a13264a206a36b2542abe3082988941529636ba7c2e3fa557bdd9948c1af8ce": {
      "address": "0x7a4AFe0b78fd2637F62847E8AdCb4a4B4073fa5C",
      "txHash": "0x7de3e5fc70d9702badbde080610e4f84f06b442524a13a59eaf596d873ae734a",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:21"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:24"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:31"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:34"
          },
          {
            "label": "totalShares",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:42"
          },
          {
            "label": "claimedRewards",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:48"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:52"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:55"
          },
          {
            "label": "userShares",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:60"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)5228_storage)",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:63"
          },
          {
            "label": "userAllowance",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:66"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "12",
            "type": "t_array(t_uint256)49_storage",
            "contract": "StakerStorage",
            "src": "contracts/main/StakerStorage.sol:69"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "61",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "61",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "62",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "112",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "113",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "162",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "163",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "212",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "213",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "214",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "215",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "216",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap1",
            "offset": 0,
            "slot": "217",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "262",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "262",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap0",
            "offset": 0,
            "slot": "263",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)5228_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Withdrawal)5228_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "2c971d9604b18a10d043d60b04750b5dbe4f98251394322fca4d4f68d5ea21ac": {
      "address": "0x6864f70DCF5C365358Ee1C23eb784BE6B77EfB9d",
      "txHash": "0x54342fbf586a2ba0415c5519b3822ba57949ad38c7701d9c0b2ba92b827de290",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:47"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)5968_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:50"
          },
          {
            "label": "userAllowance",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:53"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_struct(Allocation)5975_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:56"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)5975_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:59"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:62"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:65"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:68"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)5975_storage))": {
            "label": "mapping(address => mapping(address => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Allocation)5975_storage)": {
            "label": "mapping(address => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)5968_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)5975_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)5968_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "465eeb743a70e5301d2731e5383943b0e32a083a546392498d88daab78100c3b": {
      "address": "0xeee3Db0Ac41f29bA1EBD05a5e9894c40DbCa7F32",
      "txHash": "0xb45ecb634edf470a67933cd09678c1b811ea4af2150004ee2ea061a3b29c6dd8",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:47"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6008_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:50"
          },
          {
            "label": "userAllowance",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:53"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_struct(Allocation)6015_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:56"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6015_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:59"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:62"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:65"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:68"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6015_storage))": {
            "label": "mapping(address => mapping(address => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Allocation)6015_storage)": {
            "label": "mapping(address => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6008_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6015_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6008_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "88f57d1902894416de108fe617906872fe7a3ab5e4ed3858b80d80720cb0895d": {
      "address": "0xEc8daEa4370d6541e928a4C93D02Ca7b2e5c3a61",
      "txHash": "0x23ba1a818f0b325452925b20fa02884660001b597742329d9c61b38edb5a91b1",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:47"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6086_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:50"
          },
          {
            "label": "userAllowance",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:53"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_struct(Allocation)6093_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:56"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6093_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:59"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:62"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:65"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:68"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6093_storage))": {
            "label": "mapping(address => mapping(address => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Allocation)6093_storage)": {
            "label": "mapping(address => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6086_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6093_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6086_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "ac133168de3213e462f4a5c54372c9a3bc8f7a5ab3bc92d5f9aef07a508b747f": {
      "address": "0x8a90Da7ed6dd20F953ed6Df37FA896daB57e001F",
      "txHash": "0x819535c5a6136fef2b2ce31ef88eeaa01e051eda84fdf5c7d0bcbe09625ab0c7",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:47"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6093_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:50"
          },
          {
            "label": "userAllowance",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:53"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_struct(Allocation)6100_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:56"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6100_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:59"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:62"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:65"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:68"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6100_storage))": {
            "label": "mapping(address => mapping(address => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Allocation)6100_storage)": {
            "label": "mapping(address => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6093_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6100_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6093_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "9bf1eac244be25c60e6bd876c250c88819abaf192c158491a80dc4c5fcc5f186": {
      "address": "0x9F363147828581A43d2ca50CB40E251A4B4260e2",
      "txHash": "0xe63d59b06576cce20dc337759e4a309125c66c15ed096836f6776ca0cdb79f68",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:47"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6106_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:50"
          },
          {
            "label": "userAllowance",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:53"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_struct(Allocation)6113_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:56"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6113_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:59"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:62"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:65"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:68"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6113_storage))": {
            "label": "mapping(address => mapping(address => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Allocation)6113_storage)": {
            "label": "mapping(address => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6106_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6113_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6106_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "43450ef78f49198a49dc31c2461436adb6d78935e5a9a09c337f546036c88572": {
      "address": "0xa9802169ec77AE75f67567dc6F6cC918895a10D1",
      "txHash": "0xd979d4f6824d7c315eb17a5c52511b69e448385e4b69d87c7f179067de4c6ee1",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:47"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6114_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:50"
          },
          {
            "label": "userAllowance",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:53"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_struct(Allocation)6121_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:56"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6121_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:59"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:62"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:65"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:68"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6121_storage))": {
            "label": "mapping(address => mapping(address => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Allocation)6121_storage)": {
            "label": "mapping(address => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6114_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6121_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6114_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e12c37cc88125467b8458c9f567b4e0443ead159e17a4df9608b19b39b48f8ed": {
      "address": "0x826dE150Ae91b2B763CBf1e2CD3a73F6d769f1D0",
      "txHash": "0x9067bb8c2271d2a1c83812f97259e23aa57e6bd94641c4bea96ed505f6f29e37",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:47"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6140_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:50"
          },
          {
            "label": "userAllowance",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:53"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_struct(Allocation)6147_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:56"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6147_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:59"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:62"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:65"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:68"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6147_storage))": {
            "label": "mapping(address => mapping(address => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Allocation)6147_storage)": {
            "label": "mapping(address => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6140_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6147_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6140_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "7a697fe36e9d54617879bf532aedfc635937c681b73beb9712381087f3c22eb4": {
      "address": "0x60f65e11B31469055Bf14E1BEA8e5f0374d5018F",
      "txHash": "0x7c396bbfb8923f41db0ca3bc1a0def81ed14b769f3fb2662800be8df6a7f42e7",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:47"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6143_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:50"
          },
          {
            "label": "userAllowance",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_struct(Allocation)6150_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6150_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:63"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_array(t_address)dyn_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:66"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:69"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_array(t_address)dyn_storage)": {
            "label": "mapping(address => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(Allocation)6150_storage))": {
            "label": "mapping(address => mapping(address => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Allocation)6150_storage)": {
            "label": "mapping(address => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6143_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6150_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6143_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "ea7766577ce5bc14493a4446e8893940314fdaab203052632d24539d01dacdf2": {
      "address": "0x126C6ee1FA90d5B86fc147B2Fb65BF243a3D7f30",
      "txHash": "0xc200e39c037d0074fae9b7105cf9d7f2e2e6da55713153f3480b80f30f363d12",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6356_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6363_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6363_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6363_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6363_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6363_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6356_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6363_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6356_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "7ab51ca984a75959b8f637912f035d23b946bda9f5b2ab14ed27c779736b756e": {
      "address": "0x70A3b34E585212efd7A83ECce4F3AE7a6a810b99",
      "txHash": "0x2477d29b3bcfe217aedc1465aa1806e3d77633ff1261e8804feca88e7419d10b",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6356_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6363_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6363_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6363_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6363_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6363_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6356_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6363_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6356_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "615f40ccc210ccbb1d671c80c259b998de1442971662ecd72c0325f641d093bc": {
      "address": "0xaba3D66e7C4A90167220CFD422f570D862798E43",
      "txHash": "0x77160c5a73501791b5dc803e9a6c96ddd3f879501720c74d440fc4e3974a4e5f",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6357_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6364_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6364_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6364_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6364_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6364_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6357_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6364_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6357_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "9334bafb4d4696d15daca27190a388efa3212b7db757deb760cbc99e9763cffa": {
      "address": "0x49Bcd6C751AbC9E1e0a711881Ee2599Fce4439bb",
      "txHash": "0x90761b9cb5a6d405fa8513b799bf03a7dadd1eed8ce55c3e03c40fbc5568eaaa",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6357_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6364_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6364_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6364_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6364_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6364_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6357_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6364_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6357_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "2ec3531e031418c4dde836a8755c42644739231a19b93c8f09cefb5560f2ed24": {
      "address": "0xcE2A6413B69D750ABd34B59445e700A62390F6Dd",
      "txHash": "0xa582a6b6cb7f02d43015052fbac9551f53051375cba8debf76b0ef7f002ec63c",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6353_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6360_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6360_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6360_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6360_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6360_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6353_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6360_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6353_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "71b699c3b0e9e09875585e66facd1a6acde127b87f1d789fc526ed98b4f0c2f1": {
      "address": "0x31106C707fA8ae81A9d70cD8D843C5241DA3E410",
      "txHash": "0xafa7f94d104103f5e862ae841992811856f781031d23a219ef844d08aaddc4ae",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6397_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6404_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6404_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6404_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6404_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6404_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6397_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6404_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6397_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "eca845723eaa4fc865f0a570b41f3e8fdc518366e7b36d456b83227463438b1c": {
      "address": "0xe41EcEdb89743189141f14B92d69829ED215C8C1",
      "txHash": "0xab90490c92353c3a0a4e29d540c4f06000f53de6c88dc7aa66bfe415f102e2e1",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6421_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6428_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6428_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6428_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6428_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6428_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6421_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6428_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6421_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "3a30d1bfdb00bd4c4ba97c32530c10f0334600fa851efb242a9211c44cce995d": {
      "address": "0x5468AD707BDF8dB2f49E169C8054260152889820",
      "txHash": "0x0d2731367f204504426ec66a5204b2850e8ad06812d9862a55889a70c4927995",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6418_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6425_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6425_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/StakerStorage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6425_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6425_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6425_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6418_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6425_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6418_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "61d728e6add5b93dc1f19ba404bfdb85791b5a3abbaa32c1eb02b6142bc724ae": {
      "address": "0x25A38fd0484daca794b046Eb6F7C5114272eB656",
      "txHash": "0x62d2a4763a5eb925d1aaba39825a17e96140fb47a2ec702eae3475744dd24b96",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6747_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6754_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6754_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6754_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6754_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6754_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6747_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6754_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6747_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "3dc9a8626a6c3de233fb1849c67fccf807f214c283108b57f50958da1df781ca": {
      "address": "0xD7044680987c69ED1fDBDa35EC343B704CC7DC38",
      "txHash": "0xf1189320ec6974316c4f2715b97afd0cf7a578a95eb2551ec4a4b2288204d125",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6817_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6824_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6824_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6824_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6824_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6824_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6817_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6824_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6817_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "ac236bf25e262f45f34b387f7f2b9d7275a9b26e31cafe75447c95de4378b111": {
      "address": "0xa6Ba789fF09469Ad51165a692A105c7f87264059",
      "txHash": "0x043d48a8031bc9a6ba850183264e654cbb7a3e8851fa37fc3d47b19fd1c1c6f1",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6848_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6855_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6855_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6855_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6855_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6855_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6848_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6855_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6848_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "4dccd2ce08b6d9613edd25a3d63a20f401d815d8ac4dc01f5a73af52d97dca18": {
      "address": "0x22FD424e011017a6ff04f51EBD23a63DACB5DAf2",
      "txHash": "0xc438c3d36f2720601805aa0e7ca1d46e2a791762e5e7b6450ba7a7026dc4467b",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6848_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6855_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6855_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6855_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6855_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6855_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6848_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6855_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6848_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "d62ec1f4d68da2b838cbdcff7ee7c8d1417b7895662b0a8696e18865abfe852f": {
      "address": "0x783687362b8ED65D96049297cF9901DF17B61E78",
      "txHash": "0x0197d31333385617b7fdd733e656645148f17484ee62757a653bfb1311f6faee",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6832_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6839_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6839_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:64"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "13",
            "type": "t_array(t_uint256)50_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:71"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6839_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6839_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6839_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6832_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6839_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6832_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "5e08937f89ec5e40352f910f09acbf4c2c6b326fae16d5c7f7f6c1de6bdb3ea6": {
      "address": "0x268e7A1bCcC4EfbCA54d05B353b39b528CBf906A",
      "txHash": "0x7b852097c50b1f8360c024994f57b533c8f942b09b44cca08e41a047139f0c4e",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6942_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6949_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6949_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:63"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:66"
          },
          {
            "label": "epsilon",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:69"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_uint256)49_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:72"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6949_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6949_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6949_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6942_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6949_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6942_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "3cd751402239a8b3454e31fdb6980acdea8e483e21e43f4c9668621ab6d6c8f9": {
      "address": "0xF2eb72398F389d8F56B8156D5C8Cf8491A4E5144",
      "txHash": "0x0b5e379b354e2096f9f9355e16ae46a430eba5c33180395c36d6b17f5e99f3f8",
      "layout": {
        "solcVersion": "0.8.14",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:27"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:30"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:33"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:37"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:40"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:44"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:48"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:51"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6975_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:54"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6982_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:57"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6982_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:60"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:63"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:66"
          },
          {
            "label": "epsilon",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:69"
          },
          {
            "label": "allowStrict",
            "offset": 0,
            "slot": "14",
            "type": "t_bool",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:72"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_uint256)48_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:75"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6982_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6982_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6982_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6975_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6982_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)6975_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "d953353b40c67ed689faec570776d5859f1d46aaa76d8542e301eaaa0156cc0a": {
      "address": "0xE17035bcDfE8C9A4FE529EE4DEdaF2065e91D829",
      "txHash": "0xb837460328edf69f7a7f7aba093fcb89a7bd9dbd82e73205d314caf9cde89bdd",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:16"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:19"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:23"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:26"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:30"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:34"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:37"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)7139_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:41"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)7146_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:44"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)7146_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:47"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:50"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:53"
          },
          {
            "label": "epsilon",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:56"
          },
          {
            "label": "allowStrict",
            "offset": 0,
            "slot": "14",
            "type": "t_bool",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:59"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_uint256)48_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:62"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:80"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1231",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:30"
          },
          {
            "label": "_decimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:31"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:284"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1231": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)7146_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)7146_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)7146_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)7139_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)7146_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)7139_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "28e70bf36a0cf8df9740080c4e42d96445fa578be6afc8eb1087abd02e03fbc9": {
      "address": "0x132d9fF88AcdB77B95D0FB09657377d17851F476",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:12"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:15"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:18"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:22"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:25"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:29"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:33"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:36"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)7291_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:40"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)7298_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:43"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)7298_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:46"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:49"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:52"
          },
          {
            "label": "epsilon",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:55"
          },
          {
            "label": "allowStrict",
            "offset": 0,
            "slot": "14",
            "type": "t_bool",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:58"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "15",
            "type": "t_array(t_uint256)48_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:61"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "63",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "63",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "64",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "114",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "115",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "164",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "165",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "214",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "215",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "216",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "217",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "218",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "219",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "264",
            "type": "t_contract(IERC20Upgradeable)1242",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:54"
          },
          {
            "label": "_underlyingDecimals",
            "offset": 20,
            "slot": "264",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:55"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "265",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:267"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1242": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)7298_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)7298_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)7298_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)7291_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)7298_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Withdrawal)7291_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "1582c2acaf98c3a78b91f907a9bc5c1deeb0f5a54f43fd602a3b9de3d3871823": {
      "address": "0xA9991567F951A8837c192bf1f9A2561cD9b2E943",
      "txHash": "0x06851c8a90132996e3efdb52a7a680de8a8cc85e4f075b25684a428cfcf6b61d",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:16"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:19"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:23"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:26"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:30"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:34"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:37"
          },
          {
            "label": "latestUnbondingNonce",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:42"
          },
          {
            "label": "expiryPeriod",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:45"
          },
          {
            "label": "depositFee",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:49"
          },
          {
            "label": "withdrawalFee",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:53"
          },
          {
            "label": "minDepositAmount",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:56"
          },
          {
            "label": "minWithdrawalAmount",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:59"
          },
          {
            "label": "dQueue",
            "offset": 0,
            "slot": "14",
            "type": "t_contract(Queue)4525",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:62"
          },
          {
            "label": "wQueue",
            "offset": 0,
            "slot": "15",
            "type": "t_contract(Queue)4525",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:65"
          },
          {
            "label": "dQueueBalance",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:68"
          },
          {
            "label": "wQueueBalance",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:71"
          },
          {
            "label": "dQueueThreshold",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:74"
          },
          {
            "label": "wQueueThreshold",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:77"
          },
          {
            "label": "preshares",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:80"
          },
          {
            "label": "indirectUnbondingWithdrawals",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_uint256,t_struct(IndirectWithdrawal)6924_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:84"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)6919_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:90"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6931_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:93"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6931_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:96"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:99"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:102"
          },
          {
            "label": "epsilon",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:105"
          },
          {
            "label": "allowStrict",
            "offset": 0,
            "slot": "28",
            "type": "t_bool",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:108"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_uint256)48_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:111"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "77",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "77",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "78",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "128",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "129",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "178",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "179",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "228",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "229",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "230",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "231",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "232",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "233",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "278",
            "type": "t_contract(IERC20Upgradeable)1242",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:54"
          },
          {
            "label": "_underlyingDecimals",
            "offset": 20,
            "slot": "278",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:55"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "279",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:267"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1242": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(Queue)4525": {
            "label": "contract Queue",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6931_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)6931_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)6931_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(IndirectWithdrawal)6924_storage)": {
            "label": "mapping(uint256 => struct IndirectWithdrawal)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)6919_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)6931_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(IndirectWithdrawal)6924_storage": {
            "label": "struct IndirectWithdrawal",
            "members": [
              {
                "label": "first",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "last",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Withdrawal)6919_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "af6e8a054a36118e98bb837d6001cd7341647ab0ed50af291f4a34954da71ac9": {
      "address": "0xEA57866B6045FB21444D7Cc174d4450fE6F120cE",
      "txHash": "0xa3670ed37aaaac03b67cf9110fb69d5370784f29dc084c5714852b4c209c442f",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:13"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:16"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:19"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:23"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:26"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:30"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:34"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:37"
          },
          {
            "label": "latestUnbondingNonce",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:42"
          },
          {
            "label": "expiryPeriod",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:45"
          },
          {
            "label": "depositFee",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:49"
          },
          {
            "label": "withdrawalFee",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:53"
          },
          {
            "label": "minDepositAmount",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:56"
          },
          {
            "label": "minWithdrawalAmount",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:59"
          },
          {
            "label": "dQueue",
            "offset": 0,
            "slot": "14",
            "type": "t_contract(Queue)5894",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:62"
          },
          {
            "label": "wQueue",
            "offset": 0,
            "slot": "15",
            "type": "t_contract(Queue)5894",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:65"
          },
          {
            "label": "dQueueBalance",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:68"
          },
          {
            "label": "wQueueBalance",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:71"
          },
          {
            "label": "dQueueThreshold",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:74"
          },
          {
            "label": "wQueueThreshold",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:77"
          },
          {
            "label": "preshares",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:80"
          },
          {
            "label": "indirectUnbondingWithdrawals",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_uint256,t_struct(IndirectWithdrawal)8293_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:84"
          },
          {
            "label": "unbondingWithdrawals",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_uint256,t_struct(Withdrawal)8288_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:90"
          },
          {
            "label": "totalAllocated",
            "offset": 0,
            "slot": "23",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)8300_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:93"
          },
          {
            "label": "allocations",
            "offset": 0,
            "slot": "24",
            "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)8300_storage)))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:96"
          },
          {
            "label": "recipients",
            "offset": 0,
            "slot": "25",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:99"
          },
          {
            "label": "distributors",
            "offset": 0,
            "slot": "26",
            "type": "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:102"
          },
          {
            "label": "epsilon",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:105"
          },
          {
            "label": "allowStrict",
            "offset": 0,
            "slot": "28",
            "type": "t_bool",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:108"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "29",
            "type": "t_array(t_uint256)48_storage",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:111"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "77",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "77",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "78",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "128",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "129",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "178",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "179",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "228",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "229",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "230",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "231",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "232",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "233",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "278",
            "type": "t_contract(IERC20Upgradeable)1242",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:54"
          },
          {
            "label": "_underlyingDecimals",
            "offset": 20,
            "slot": "278",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:55"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "279",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:267"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1242": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(Queue)5894": {
            "label": "contract Queue",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)8300_storage)))": {
            "label": "mapping(address => mapping(address => mapping(bool => struct Allocation)))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_array(t_address)dyn_storage))": {
            "label": "mapping(address => mapping(bool => address[]))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_bool,t_struct(Allocation)8300_storage))": {
            "label": "mapping(address => mapping(bool => struct Allocation))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_array(t_address)dyn_storage)": {
            "label": "mapping(bool => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bool,t_struct(Allocation)8300_storage)": {
            "label": "mapping(bool => struct Allocation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(IndirectWithdrawal)8293_storage)": {
            "label": "mapping(uint256 => struct IndirectWithdrawal)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Withdrawal)8288_storage)": {
            "label": "mapping(uint256 => struct Withdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Allocation)8300_storage": {
            "label": "struct Allocation",
            "members": [
              {
                "label": "maticAmount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "sharePriceNum",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "sharePriceDenom",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(IndirectWithdrawal)8293_storage": {
            "label": "struct IndirectWithdrawal",
            "members": [
              {
                "label": "first",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "last",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Withdrawal)8288_storage": {
            "label": "struct Withdrawal",
            "members": [
              {
                "label": "user",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "e95825c05c5d160fc36be70f4c079af476b0250f4f949b47caa8439060b5b8f0": {
      "address": "0x57181917c89445ACc67f3A3a4a49DFA4136FCB7F",
      "txHash": "0x21db4c1091c59bb7e67114ce0669b9b819c7be78cb17279ec133fa67882edd83",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "latestUnbondingNonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:12"
          },
          {
            "label": "expiryPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:15"
          },
          {
            "label": "depositFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:19"
          },
          {
            "label": "withdrawalFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:23"
          },
          {
            "label": "minDepositAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:26"
          },
          {
            "label": "minWithdrawalAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:29"
          },
          {
            "label": "dQueue",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(Queue)4271",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:32"
          },
          {
            "label": "wQueue",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(Queue)4271",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:35"
          },
          {
            "label": "dQueueBalance",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:38"
          },
          {
            "label": "wQueueBalance",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:41"
          },
          {
            "label": "dQueueThreshold",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:44"
          },
          {
            "label": "wQueueThreshold",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:47"
          },
          {
            "label": "preshares",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:50"
          },
          {
            "label": "indirectUnbondingWithdrawals",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_struct(IndirectWithdrawal)6610_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:54"
          },
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "14",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:60"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "15",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:63"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "16",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:66"
          },
          {
            "label": "whitelistAddress",
            "offset": 0,
            "slot": "17",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:70"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "18",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:73"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:77"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:81"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:84"
          },
          {
            "label": "epsilon",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:87"
          },
          {
            "label": "allowStrict",
            "offset": 0,
            "slot": "23",
            "type": "t_bool",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:90"
          },
          {
            "label": "_initialized",
            "offset": 1,
            "slot": "23",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 2,
            "slot": "23",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "24",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "74",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "75",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "124",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "125",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "174",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "175",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "176",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "177",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "178",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "179",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "224",
            "type": "t_contract(IERC20Upgradeable)1242",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:54"
          },
          {
            "label": "_underlyingDecimals",
            "offset": 20,
            "slot": "224",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:55"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "225",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:267"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1242": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(Queue)4271": {
            "label": "contract Queue",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(IndirectWithdrawal)6610_storage)": {
            "label": "mapping(uint256 => struct IndirectWithdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(IndirectWithdrawal)6610_storage": {
            "label": "struct IndirectWithdrawal",
            "members": [
              {
                "label": "first",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "last",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "6bd52726d2c1c8d57e3400a21bd1eef37b96eb10c19929f779c5d946abc9abc0": {
      "address": "0xe5570BA53B7B013CcBf473f700e3C621C65ed728",
      "txHash": "0x9f332972a4d654907ad01a1d0e44c374426ace4a7087bf692adcab81405eba5e",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "latestUnbondingNonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:14"
          },
          {
            "label": "expiryPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:17"
          },
          {
            "label": "depositFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:21"
          },
          {
            "label": "withdrawalFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:25"
          },
          {
            "label": "minDepositAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:28"
          },
          {
            "label": "minWithdrawalAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:31"
          },
          {
            "label": "dQueue",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(Queue)4280",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:34"
          },
          {
            "label": "wQueue",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(Queue)4280",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:37"
          },
          {
            "label": "dQueueBalance",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:40"
          },
          {
            "label": "wQueueBalance",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:43"
          },
          {
            "label": "dQueueThreshold",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:46"
          },
          {
            "label": "wQueueThreshold",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:49"
          },
          {
            "label": "preshares",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:52"
          },
          {
            "label": "indirectUnbondingWithdrawals",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_struct(IndirectWithdrawal)6655_storage)",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:56"
          },
          {
            "label": "stakingTokenAddress",
            "offset": 0,
            "slot": "14",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:62"
          },
          {
            "label": "stakeManagerContractAddress",
            "offset": 0,
            "slot": "15",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:65"
          },
          {
            "label": "validatorShareContractAddress",
            "offset": 0,
            "slot": "16",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:68"
          },
          {
            "label": "treasuryAddress",
            "offset": 0,
            "slot": "17",
            "type": "t_address",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:71"
          },
          {
            "label": "phi",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:75"
          },
          {
            "label": "distPhi",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:79"
          },
          {
            "label": "cap",
            "offset": 0,
            "slot": "20",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:82"
          },
          {
            "label": "epsilon",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256",
            "contract": "TruStakeMATICv2Storage",
            "src": "contracts/main/TruStakeMATICv2Storage.sol:85"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "22",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "22",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "23",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "73",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "74",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "123",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "124",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "173",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "174",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "175",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "176",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:46"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "177",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:47"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "178",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:376"
          },
          {
            "label": "_asset",
            "offset": 0,
            "slot": "223",
            "type": "t_contract(IERC20Upgradeable)1242",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:54"
          },
          {
            "label": "_underlyingDecimals",
            "offset": 20,
            "slot": "223",
            "type": "t_uint8",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:55"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "224",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC4626Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol:267"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20Upgradeable)1242": {
            "label": "contract IERC20Upgradeable",
            "numberOfBytes": "20"
          },
          "t_contract(Queue)4280": {
            "label": "contract Queue",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(IndirectWithdrawal)6655_storage)": {
            "label": "mapping(uint256 => struct IndirectWithdrawal)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(IndirectWithdrawal)6655_storage": {
            "label": "struct IndirectWithdrawal",
            "members": [
              {
                "label": "first",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "last",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
